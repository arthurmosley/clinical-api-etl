AUTHOR: Arthur Mosley
This document served as a place for me to store my thoughts aside from writing inline comments in the code.

*** Overall comments regarding this experience ***
Thank you George for giving me the opportunity to complete this assessment. I really enjoyed getting my feet (really) wet
by doing this project and I learned a lot and found that I have so much more to learn as well. Parts 1 and 2 were
relatively easy for me to accomplish and it didn't take too much time to wrap my head around what I should do. However,
step 3 took me by surprise. 
I felt like I had to completely overhaul how I approached the ETL part of the service once I started reviewing STEP 3 of
this project. In hindsight I would have prioritized working out the database schema and requirements there before working
on the ETL as extensively as I did. I think that burdoned me a bit when trying to refactor a lot of it. I did spend a lot 
more time on this project than what was expected but I played around with some ideas, read about how things could be 
extended and even tried extending some of the requirements through actual code implementations. 

*** NOTES ON AI USAGE ***
The only AI agent used was ChatGPT for this assessment. Initially I used it to familiarize myself with what was in 
requirements.txt as well as the python FastAPI, sqlalchemy and pandas libraries. I also used
ChatGPT to help me transform my ETL from what it was before the database changes. 

Smaller things I used ChatGPT for:
1. Various testing scenarios beyond what I had thought of.
2. debugging pandas related data manipulation
3. Edgecase psql related table relation conflicts and issues.

*** I'm a big proponent of using AI for feedback on ideas, various test scenarios, and edgecase discovery
        However, I always used my mind first and questioned everything that it gave me. And asked
        for thorough explanations when 1. I didn't understand a concept, and 2. when it proposed something
        that I was not familiar with. 

If I had more time to work on this I would dig more deeply into other existing pandas opensource projects
to better understand idiomatic usage.

--- Checking Tables ---
docker compose up -d postgres
docker compose exec postgres psql -U user -d clinical_data -c "\dt"

--- Checking that files exist in container ---
docker compose exec etl ls -l /app/data

--- Checking new endpoints for 
    1. @app.post("/jobs", response_model=ETLJobStatus)
    2. @app.get("/jobs/{job_id}/status", response_model=ETLJobStatus)

        curl -sS -X POST http://localhost:8000/jobs \ -H 'Content-Type: application/json' \ -d '{"jobId":"00000000-0000-0000-0000-00000000abcd","filename":"sample_study001.csv"}' | jq 
        curl -sS http://localhost:8000/jobs/00000000-0000-0000-0000-00000000abcd/status | jq

--- tracking logs for etl service
        docker compose logs -f etl

--- MEDICAL TERMINOLOGY:
    Systolic is the first number,
    Diastolic is the second number.

https://docs.sqlalchemy.org/en/20/core/engines.html
https://fastapi.tiangolo.com/reference/testclient/ 
https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf 

--- running my pytests
    docker compose exec etl pytest

--- RESEARCH
    Why does fastapi testclient have issues with relative paths? (ie --> .path)

--- Testing as of right now:
    1. Hooked up pytest with fastapi testclient to test endpoints.
    2. some manual testing:
        a.
            curl -s http://localhost:3000/health
            curl -s http://localhost:8000/health
        b. 
            SUBMIT=$(curl -s -X POST http://localhost:3000/api/etl/jobs \
            -H 'Content-Type: application/json' \
            -d '{"filename":"sample_study001.csv","studyId":"STUDY001"}')
            echo "$SUBMIT" | jq .
            JOB=$(echo "$SUBMIT" | jq -r '.data.jobId')

---Pandas notes:
        df["quality_score"] = pd.to_numeric(df["quality_score"], errors="coerce")
        df = df.assign(quality_score=pd.to_numeric(df["quality_score"], errors="coerce"))

        The above two things do the same thing just assigning 

-- TODO: Candidate to implement
-- Expected tables to be designed by candidate:
-- - clinical_measurements (raw data)
-- - processed_measurements (transformed data)
-- - participants
-- - studies
-- - data_quality_reports
-- - measurement_aggregations


